<div class="max-w-2xl mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-6 text-center">Generate HTML Snippet</h1>

  <%= form_with url: codegen_index_path, method: :post, local: true, data: { turbo: false }, class: "mb-8 bg-white shadow-md rounded px-8 pt-6 pb-8" do %>
    <div class="mb-6">
      <%= label_tag :image, "Upload Screenshot:", class: "block text-lg font-medium text-gray-700 mb-2" %>
      <div id="dropzone" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-blue-500 transition duration-300">
        <p class="text-lg mb-2">Drag and drop an image here, or click to select a file</p>
        <p class="text-sm text-gray-500">Supported formats: PNG, JPG, JPEG</p>
        <%= file_field_tag :image, accept: 'image/*', class: "hidden", id: "image-input", required: true %>
      </div>
      <div id="image-preview" class="mt-4 hidden">
        <img id="preview-image" src="" alt="Uploaded image preview" class="max-w-full h-auto rounded-lg shadow-md mb-2">
        <button type="button" id="clear-image" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
          Clear Image
        </button>
      </div>
    </div>
    
    <div class="mb-4">
      <%= label_tag :component_type, "Select Component Type:", class: "block text-sm font-medium text-gray-700 mb-2" %>
      <%= select_tag :component_type, options_for_select([['Card', 'card'], ['Form', 'form'], ['Table', 'table']]), class: "w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-blue-500" %>
    </div>
    
    <div class="mb-4">
      <%= label_tag :prompt, "Enter additional details (optional):", class: "block text-sm font-medium text-gray-700 mb-2" %>
      <%= text_area_tag :prompt, @prompt, rows: 4, class: "w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-blue-500" %>
    </div>
    
    <div class="flex items-center justify-end">
      <%= submit_tag "Generate Snippet", class: "bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline", id: "generate-button" %>
      <div id="loading-indicator" class="ml-4 hidden">
        <svg class="animate-spin h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      </div>
    </div>
  <% end %>

  <% if @html_code.present? %>
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
      <h2 class="text-2xl font-semibold mb-4">Generated HTML Snippet:</h2>
      <div class="relative">
        <pre id="html-snippet" class="bg-gray-100 p-4 rounded-lg overflow-x-auto mb-6 text-sm"><%= @html_code %></pre>
        <button id="copy-button" class="absolute top-2 right-2 bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-2 rounded text-sm focus:outline-none focus:shadow-outline">
          Copy to Clipboard
        </button>
      </div>

      <h2 class="text-2xl font-semibold mb-4">Preview:</h2>
      <div class="border p-4 rounded-lg">
        <%= @html_code.html_safe %>
      </div>
    </div>
  <% end %>
</div>

<script>
  const dropzone = document.getElementById('dropzone');
  const imageInput = document.getElementById('image-input');
  const imagePreview = document.getElementById('image-preview');
  const previewImage = document.getElementById('preview-image');
  const clearImageBtn = document.getElementById('clear-image');

  dropzone.addEventListener('click', () => imageInput.click());

  dropzone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropzone.classList.add('border-blue-500');
  });

  dropzone.addEventListener('dragleave', () => {
    dropzone.classList.remove('border-blue-500');
  });

  dropzone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropzone.classList.remove('border-blue-500');
    if (e.dataTransfer.files.length) {
      imageInput.files = e.dataTransfer.files;
      updateImagePreview(e.dataTransfer.files[0]);
    }
  });

  imageInput.addEventListener('change', (e) => {
    if (e.target.files.length) {
      updateImagePreview(e.target.files[0]);
    }
  });

  clearImageBtn.addEventListener('click', (e) => {
    e.preventDefault();
    clearImage();
  });

  function updateImagePreview(file) {
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        previewImage.src = e.target.result;
        imagePreview.classList.remove('hidden');
        dropzone.classList.add('hidden');
      };
      reader.readAsDataURL(file);
    }
  }

  function clearImage() {
    imageInput.value = '';
    imagePreview.classList.add('hidden');
    previewImage.src = '';
    dropzone.classList.remove('hidden');
  }

  // Add new JavaScript for the copy to clipboard functionality
  const copyButton = document.getElementById('copy-button');
  const htmlSnippet = document.getElementById('html-snippet');

  if (copyButton && htmlSnippet) {
    copyButton.addEventListener('click', () => {
      const textArea = document.createElement('textarea');
      textArea.value = htmlSnippet.textContent;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      
      copyButton.textContent = 'Copied!';
      setTimeout(() => {
        copyButton.textContent = 'Copy to Clipboard';
      }, 2000);
    });
  }

  // Add new JavaScript for the loading indicator
  const generateButton = document.getElementById('generate-button');
  const loadingIndicator = document.getElementById('loading-indicator');
  const form = document.querySelector('form');

  if (form && generateButton && loadingIndicator) {
    form.addEventListener('submit', (e) => {
      generateButton.disabled = true;
      generateButton.classList.add('opacity-50', 'cursor-not-allowed');
      loadingIndicator.classList.remove('hidden');
    });
  }
</script>